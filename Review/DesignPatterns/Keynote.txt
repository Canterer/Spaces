六大设计原则：
	开闭原则
		对扩展开放、对修改关闭。最重要最基础的原则
	单一职责原则
	里式替换原则
		子类可以扩展父类的功能,但不能改变父类原有的功能。
	依赖倒置原则
		细节依赖抽象,面向接口编程。
	接口隔离原则
		接口少而精,避免关联性不大的接口都组织在一起
	迪米特法则
		又称最少知识原则。类应该对自己耦合或调用的类 知道的最少。



创建类型模式
	工厂方法Factory Method
		提供一个创建派生类对象(同一个基类)的方法。需要一个基类对象提供接口和成员。
	抽象工厂Abstract Factory
		提供多个创建不同派生类对象(不同的基类)的方法。需要多个基类对象。
	单例模式Singleton
		确保一个类只有一个实例。static局部对象确保只初始化一次。
	原型模式Prototype
		提供复制一个对象的方法即clone。都继承原型接口基类,提供注册表达到根据名字创建类对象。类似CDO和静态初始化。
	生成器Builder
		分多个步骤创建复杂对象。一条流水线生成不同派生类。提供不同初始化参数配置

结构型模式
	组合Composite
		对象树或广义表。可以将复杂对象或简单对象当成一种独立对象使用
	享元Flyweight
		共享不变的内在状态。即共享多个对象所共有的相同状态。节约内存。
	桥接Bridge
		抽象和实现分离,各自扩展不同功能。 pointer to implement。
	外观Facade
		为复杂系统提供简单交互接口。负责多个对象的初始化和管理。如媒体播放器内部支持不同平台 支持不同类型视频格式的解码器等
	适配器Adapter
		又称封装器wrapper。C函数封装成lua函数。继承接口内含实现类。
	装饰器Decorator
		将对象放入包好行为的特殊对象中。即扩展已有对象的行为。继承接口，持有接口的派生类对象。
	代理Proxy
		主要是控制对象访问、延迟初始化等。

行为型模式
	迭代器Iterator
		提供一种遍历对象的方式。需要容器提供对应的接口
	状态State
		状态机，在不同状态间切换。
	观察者Observer
		事件订阅机制。监听事件-触发回调
	策略Strategy
		传递函数指针作为一种策略。定义一系列算法，可以让对象切换不同的算法。
	中介者Mediator
		限制不同类对象间交互，减少关联。即Manager，不同类对象持有中介者或可访问同一中介者。


	访问者Visitor
		将算法与所作用的对象隔离开。接收一个Visitor对象访问自己
	备忘录Memento
		恢复和保存自身的状态。历史记录。嵌套类
	模板方法template Method
		非虚函数调用虚函数。定义一个算法的框架，允许子类重写算法的特定步骤。
	命令模式Command
		Action、组装参数。
	责任链
		触控事件
