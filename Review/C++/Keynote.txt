基础

全局变量和全局静态变量的区别
枚举与枚举类的区别
类型限定符：用于定义变量或函数时改变其默认行为的关键字

内存对齐 #program pack()

初始化列表{}



STL标准库
模板元编程



static被引入以告知编译器，将变量存储在程序的静态存储区而非栈上空间。

全局变量和全局静态变量的区别：
	全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的。作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern全局变量名的声明，就可以使用
	全局静态变量是显示用static修饰的全局变量，作用域是声明此变量所在的文件，其他文件即使用extern声明也不能使用

静态局部变量的特点：
	在全局数据区(默认为0)分配内存，程序执行到该对象的声明初仅首次初始化。它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域。

1. C和C++有什么区别？

    C++是面向对象的语言，而C是面向过程的语言；
    C++引入new/delete运算符，取代了C中的malloc/free库函数；
    C++引入引用的概念，而C中没有；
    C++引入类的概念，而C中没有；
    C++引入函数重载的特性，而C中没有

2. a和&a有什么区别？

    假设数组int a[10]; int (*p)[10] = &a;其中：
    a是数组名，是数组首元素地址，+1表示地址值加上一个int类型的大小，如果a的值是0x00000001，加1操作后变为0x00000005。*(a + 1) = a[1]。
    &a是数组的指针，其类型为int (*)[10]（就是前面提到的数组指针），其加1时，系统会认为是数组首地址加上整个数组的偏移（10个int型变量），值为数组a尾元素后一个元素的地址。
    若(int *)p ，此时输出 *p时，其值为a[0]的值，因为被转为int *类型，解引用时按照int类型大小来读取。

3. static关键字有什么作用？

    修饰局部变量时，使得该变量在静态存储区分配内存；只能在首次函数调用中进行首次初始化，之后的函数调用不再进行初始化；其生命周期与程序相同，但其作用域为局部作用域，并不能一直被访问；
    修饰全局变量时，使得该变量在静态存储区分配内存；在声明该变量的整个文件中都是可见的，而在文件外是不可见的；
    修饰函数时，在声明该函数的整个文件中都是可见的，而在文件外是不可见的，从而可以在多人协作时避免同名的函数冲突；
    修饰成员变量时，所有的对象都只维持一份拷贝，可以实现不同对象间的数据共享；不需要实例化对象即可访问；不能在类内部初始化，一般在类外部初始化，并且初始化时不加static；
    修饰成员函数时，该函数不接受this指针，只能访问类的静态成员；不需要实例化对象即可访问。



类型限定符：
	const		定义常量，表示该变量的值不能被修改
	volatile		可变的，可能会被程序以外的因素改变，如硬件或线程  禁止编辑器优化，每次都从内存去读
	mutable 		修饰类的成员变量,即使所在的对象是const,也可改变其值
	static			定义静态变量,表明该变量的作用域仅限当前文件或函数内
	restrict 		修饰的指针是唯一一种访问它所指向的对象的方式
	register		用于定义寄存器变量,表该变量被频繁使用,可以存放在CPU的寄存器中

mutable两种使用场景
	在const成员函数中修改成员变量
	在lamada表达式中，=捕捉的变量 不可以++ 添加mutable后可以

lambda表达式默认按值捕获外部变量，意味着捕获的变量在lambda内部是不可修改的。

lambda捕获列表三种方式
	[var]捕获指定变量的副本，允许读取但不允许修改。
	[&var]捕获指定变量的引用，允许修改

lambda表达式，最终会被C++编译器转换成一个匿名函数类，函数类又称仿函数，即重载了函数调用符operate ()的类。可以像函数一样使用这个类的对象实例。
在编译器的转换中会默认将值捕获方式的lamabda转换的operate()函数的cv限定符设为const
反汇编后{lambda()#1}::operator()() const

int val = 0
auto gen = [i=val]()mutable{
	i=i+1;return i;
}
反汇编后{lambda()#1}::operator()()


12. volatile有什么作用

    状态寄存器一类的并行设备硬件寄存器。
    一个中断服务子程序会访问到的非自动变量。
    多线程间被几个任务共享的变量。
    「注意」：虽然volatile在嵌入式方面应用比较多，但是在PC软件的多线程中，volatile修饰的临界变量也是非常实用的。

13. 一个参数可以既是const又是volatile吗

    可以，用const和volatile同时修饰变量，表示这个变量在程序内部是只读的，不能改变的，只在程序外部条件变化下改变，并且编译器不会优化这个变量。每次使用这个变量时，都要小心地去内存读取这个变量的值，而不是去寄存器读取它的备份。
    注意：在此一定要注意const的意思，const只是不允许程序中的代码改变某一变量，其在编译期发挥作用，它并没有实际地禁止某段内存的读写特性。

const int *p;
int const *p;
两者等同 一个指针 指向 const int
int * const p;
一个常指针 指向 int

重载：在同一作用域中的某个函数或运算符指定多个定义,称为函数重载或运算符重载
重载要求：同名函数,但参数不同  返回值不在考虑范围
重载决策：调用一个重载函数或重载运算符时，编译器通过所使用的参数类型和定义中的参数比较，选用最合适的。

子类定义父类同名函数,两者是不同作用域,此为覆盖  using BaseClass::Func 引入父类的同名函数(包含重载的)
子类定义父类同名同参的虚函数，此为override重写

重载运算符：
	*指针运算符 &取地址运算符 ->类成员访问运算符
	new delete new[] delete[] 空间申请与释放
	()函数调用 ->成员访问 ,逗号 []下标
不可重载运算符：
	.点成员访问运算符 .*成员指针访问运算符 ->*成员指针访问运算符
	::域运算符 sizeof长度运算符 ?:条件运算符 #预处理符号

T operator++ () 前缀递增运算符	返回递增后的值 b=++a+5 a初值为5 最新值为6 b为11  
T operator++ (int)	后缀递增运算符 返回原始值  b = a++ + 5  a初值为5 最新值为6 b为10

->成员访问  使类表现的像指针一样
class Data {
	int x,y;
}
class PointWrapper {
Private:
		Data *data;
Public:
		Data* operater->(){return data;}
}
Data data={10,20};
PointWrapper pw(&data);
std::count<< pw->x << pw->y;

命名空间
	命名空间可以定义在几个不同的部分中，各个组成部分可分散在不同文件中。
	如果命名空间中的某个组成部分需要请求定义在另一个文件中的名称，仍需要声明该名称。命名空间可以嵌套

<new>标准头文件
nothrow 运算符：用于在内存分配失败时不抛出异常
std::bad_alloc
new 运算符
	pointer new (type [, initializer])

int* myArray = new(std::nothrow) int[100000]

<memory>标准头文件
	std::shared_ptr、std::weak_ptr、std::unique_ptr
	std::allocator 标准分配器，提供基本的内存分配和释放功能
	std::allocator<int> alloc;
	int* p = alloc.allocate(1)
	alloc.destroy(p)//销毁对象
	alloc.deallocate(p,1)//释放内存

	std::align用于调整指针的对齐方式



new operator 	初始化对象=申请内存空间+内存定位
	type *p = new (type [, initializer])
operator new	仅申请内存空间 相当于malloc
	int *p = (int*) ::operator new(sizeof(int));
	int *p = (int*) ::operator new int(5);
placement new	定位new表达式在已分配的原始内存空间中初始化对象
	new (address) type(initializer_list)
	T* p = new (buffer) T
	T* p = new (buffer) T(args)



全局operator new函数只有三种
void* operator new(std::size_t count);
void* operator new(std::size_t count, const std::nothrow_t&) noexcept;
void* operator new(std::size_t count, void* ptr) noexcept;
全局operator delete函数
void operator delete(void*);
void operator delete(void*, std::size_t);
注意 noexcept 异常


对象内存布局、虚函数
编辑器构建的函数：
	默认构造函数、默认析构函数、
	复制构造函数、复制赋值运算符
	移动构造函数、移动赋值运算符

特殊成员函数的限制
	默认构造函数
		未声明任何构造函数
	两种复制操作时独立的
		声明一种复制操作,不影响编辑器在需要时为你生成另一种复制操作
	两种移动操作时不独立的
		声明一种移动操作,会阻止编辑器生成另一种移动操作
	显式声明了移动操作，编辑器就不会生成复制操作。(声明析构函数时，不阻止复制操作的生成,待废弃)
	移动操作的生成条件：
		未声明复制、移动操作、未声明任何析构函数。

模板泛化copy构造函数、模板泛化copy赋值运算符 不影响编辑器默认生成函数。

多态实现方式：
	静态多态：函数重载
	动态多态：虚函数

虚函数与虚指针

降低文件间的编译依赖：
	接口与实现分离,使用Pointer to implementation
	Handle classes和Interface classes解除了接口和实现之间的耦合关系，从而降低文件间的编译依赖。

派生类的名称会遮掩基类的名称
	using声明或转交函数(内部调用父类)

派生类成员函数内直接使用Base::Func()调用父类,无需传递this指针。编辑器处理。

void (MyClass::*ptrToMemFunc)() = &MyClass::memberFunction;
(obj.*ptrToMemFunc)();//使用成员函数指针调用成员函数。

std::function  std::bind

std::bind(&MyClass::health, obj, _1)
std::placeholders::_1占位符 表明第一个实参的位置 其他位置的参数可理解为默认值或payload负载


右值、左值
右值引用、左值引用、万能引用
	万能引用只会出现在模板推理的过程中

枚举和枚举类
枚举中定义名称 会与其他名字冲突  可以当int使用
枚举类定义了底层表达类型(占用大小)

switch case break


显式接口和运行期多态
	显式接口基于函数签名
	运行期基于指针或引用的动态类型调用不同的函数,即运行期多态。
隐式接口和编译期多态
	有效表达式组成了隐式接口。
	以不同的template参数具现化function templates会导致调用不同的函数,即编译器多态。

	运行期多态基于虚函数、编译器多态基于template具现化和函数重载解析。
静态类型、动态类型
	只有指针和引用才具有动态类型。

嵌套从属类型名称
	嵌套于template class内的名称, xxClass::yy

	两种例外： base class list、 member initialization list
	base class list中只存在类型、member initialization list中可能是基类构造函数或变量名

全特化和偏特化
类模板和函数模板都可以全特化
类模板可以偏特化
函数模板不可以偏特化
template<T1,T2>
void func(T1,T2){}
假设一个偏特化T1,一个偏特化T2 则可能出现T1、T2分别满足偏特化而无法决策。

// 注意这里的类型列表可能多于 模板定义的类型个数
template<typename T>//非特化的类型列表,若为空则为全特化
struct A<int,T>{ //这里带<完整的类型列表>则为特化版本
}

temlate<class T>
struct PTS {
}

template<class T, class U>
struct PTS<T U::*>{
}
struct S {};
PTS<int S::*> 模板类型为指向类成员变量的

template<class T, int N = 4>
struct TS{
	
}

模板参数限制：
	模板函数的成员初始值列表 可限制实参兼容类型 是否编译通过。
std::
std::false_type、std::true_type
std::remove_reference<T>::type
template<typename T, typename = typename std::enable_if<condition>::type>
std::decay<T> 移除引用、cv修饰符
std::is_base_of<T1,T2> T1是否为T2的基类
std::is_constructible<T1, T2>::value  能否从T2对象构造一个T1对象 

SFINAE技术使得std::enable_if得以运行。
SFINAE(Substitution failure is not an error)匹配失败并不是一个错误

template<typename T,
				typename = typename std::enable_if<
									!std::is_base_of<Person, std::decay_t<T>>::value
									&& !std::is_integral<std::remove_reference_t<T>>::value
													>::type>

//不定参数调用
template<typename F, typename Tuple = tuple<T...>, int... I>
decltype(auto) apply_(F&& f, Tuple&& args, index_sequence<I...>)
{
    return std::forward<F>(f)(std::get<I>(std::forward<Tuple>(args))...);
}

template<typename F, typename Tuple = tuple<T...>,
    typename Indices = make_index_sequence<tuple_size<Tuple>::value >>
   decltype( auto)
    apply(F&& f, Tuple&& args)
{
    return apply_(std::forward<F>(f), std::forward<Tuple>(args), Indices());
}

template<typename... Args>
decltype(auto) sum(Args... args){
	return (args + ...);
}

(...)省略号 表达任意数量的模板参数
省略号在参数名称的左侧,表示参数包
省略号在参数名称的右侧,将参数包扩展为单独的名称。
template<typename... Args>
returnType func(Args... args)

template<typename... Args>
returnType func(Args&... args)

template<typename... Args>
returnType func(const Args&... args)

template<typename... Types>
void func1(std::vector<Types...> v1)//不是一个参数包

template<typename... Types>
void func2(std::vector<Types>... v2)//参数包

折叠表达式： 一元折叠和二元折叠
	共四种：
		( 形参包  运算符  ... )
		( ...    运算符  形参包)
		( 形参包 运算符 ... 运算符 初值 )
		( 初值   运算符 ... 运算符 形参包 )

	省略号在左边即左折叠
	一元左折叠( (init op ...) )将操作符应用于参数包中的元素,从左到右
		args + ... 等同于 (a,b,c,d) + ...等同于展开 (((a+b)+c)+d)
	一元右折叠( (... op init) )将操作符应用于参数包中的元素,从右到左
		... + args 等同于 ... + (a,b,c,d)等同于展开 (((d+c)+b)+a)

函数指针：
typedef int (*fp)(int);
fp myFunction(char* s);//返回函数指针 的函数myFunction

int (*myFunction(char* s))(int);//等同上述函数

显示转换：static_cast、dynamic_cast、const_cast、reinterpret_cast(重新解释)
	static_cast: 仅在编译时检查的强制转换
	dynamic_cast: 基于虚表中的typeinfo来判断
	const_cast: 去掉变量的const
	reinterpret_cast: 用于无关类型(如指针和int)之间的强制转换

隐式类型转换
TClass::(UType c)//单参数构造函数
operator UType() const { //转换函数
	
}

资源获取即初始化(RAII)
函数对象、Lambda表达式、std::function、std::bind


当类或结构包含某些 C++ 语言功能（如虚拟基类、虚拟函数、具有不同访问控制的成员）时，编译器可以自由选择布局。 该布局可能会基于正在执行的优化而有所不同，并且在许多情况下，该对象甚至可能不会占用连续内存区域。

举例：
	如果某个类具有虚拟函数，则该类的所有实例可能会共享单个虚拟函数表。 此类型非常有用，但它们也有限制。 由于布局未定义，因此无法将其传递到使用其他语言（例如 C）编写的程序，并且由于它们可能是非连续的，因此无法使用快速低级函数（例如 memcopy）对其进行可靠复制，或者通过网络对其进行序列化

Trivial-layout普通布局、standard-layout标准布局、POD类型、文本类型
std::is_trivial<T>、std::is_standard_layout<T>、std::is_pod<T>

POD类型：
	当某一类或结构同时为普通和标准布局时,即为POD类型。POD类型的内存布局是连续的。

普通类型：
	当C++中的类或结构具有编译器提供的或显示默认设置的特殊成员函数时，该类或结构为普通类型。

	占用连续内存区域,可以具有不同访问说明符的成员。在C++中,编辑器可以自由选择对成员排序的方式。

	可以在内存中复制此类对象，但不能从C程序中可靠地使用它们。

	普通类型具有普通默认构造函数、普通复制构造函数、普通复制赋值运算符和普通析构函数。

	当定义了带参构造函数, 必须定义默认构造函数TClass()=default;

标准布局类型：
	所有成员具有相同的访问控制、可以由C程序使用。
	特征：
		没有虚拟函数或虚基类
		所有非静态数据成员具有相同的访问控制
		类类型的所有非静态成员均为标准布局
		所有基类都为标准布局
		没有与第一个非静态数据成员类型相同的基类
		满足以下条件之一：
			没有含非静态数据成员的基类(仅定义函数)
			最底层派生类中没有非静态数据成员,并且具有非静态数据成员的基类不超过一个

标准 C++ 关键字

alignas
alignof
and	(B)
and_eq	(B)
auto
bitand	(B)
bitor	(B)
bool
break
case
catch
char
char8_t	(C)
char16_t
char32_t
class
compl	(B)
concept	(C)
const
const_cast
consteval	(C)
constexpr

constinit	(C)
continue
co_await	(C)
co_return	(C)
co_yield	(C)
decltype
default
delete
do
double
dynamic_cast
else
enum
explicit
export	(C)
extern
false
float
for
friend
goto
if
inline

int
long
mutable
namespace
new
noexcept
not	(B)
not_eq	(B)
nullptr
operator
or	(B)
or_eq	(B)
private
protected
public
register
reinterpret_cast
requires	(C)
return
short
signed
sizeof
static
static_assert

static_cast
struct
switch
template
this
thread_local
throw
true
try
typedef
typeid
typename
union
unsigned
using 声明
using 指令
virtual
void
volatile
wchar_t
while
xor	(B)
xor_eq	(B)


(B) 当指定 /permissive- 或 /Za（禁用语言扩展）时，扩展运算符同义词是关键字。 当启用 Microsoft 扩展时，它们不是关键字。
(C) 指定 /std:c++20 或更高版本（例如 /std:c++latest）时受支持。

__declspec 修饰符中的 Microsoft 关键字
	这些标识符是 __declspec 修饰符的扩展属性。 它们被视为该上下文中的关键字。






add_const				从类型设置 const 类型。
add_cv				从类型设置 const/volatile 类型。
add_pointer				从类型设置指向类型的指针。
add_reference				从类型设置对类型的引用。
add_volatile				从类型设置 volatile 类型。
aligned_storage				生成适当对齐的类型。
alignment_of				获取类型对齐。
common_type				为两种类型设置通用类型的实例。
conditional				为两种类型设置通用类型的实例。

decay				设置非引用、非常量或非可变类型或者设置指向类型的指针。
enable_if				设置某种类型或未定义类型的实例。

extent				获取数组维度。
has_nothrow_assign				测试赋值时是否未引发该类型。
has_nothrow_constructor				测试默认构造时是否未引发类型。
has_nothrow_copy				测试复制构造时是否未引发类型。
has_nothrow_copy_constructor				测试复制构造时是否未引发类型。
has_nothrow_default_constructor				测试默认构造时是否未引发类型。
has_trivial_assign				测试类型是否包含普通赋值。
has_trivial_constructor				测试类型是否包含普通的默认构造函数。
has_trivial_copy				测试类型是否包含普通的复制构造函数。
has_trivial_copy_constructor				测试类型是否包含普通的复制构造函数。
has_trivial_default_constructor				测试类型是否包含普通的默认构造函数。
has_trivial_destructor				测试类型是否包含普通的析构函数。
has_virtual_destructor				测试类型是否包含虚拟的析构函数。
is_abstract				测试类型是否为抽象类。
is_arithmetic				测试类型是否为算术型。
is_array				测试类型是否为数组。
is_base_of				测试一种类型是否是另一种类型的基类。
is_class				测试类型是否为类。
is_compound				测试类型是否为非标量类型。
is_const				测试类型是否为常量类型。

is_convertible				测试一种类型是否可转换为另一种类型。

is_empty				测试类型是否为空类。
is_enum				测试类型是否为枚举。
is_floating_point				测试类型是否为浮点。
is_function				测试类型是否为函数类型。
is_fundamental				测试类型是否为 void 或算术型。
is_integral				测试类型是否为整型。
is_lvalue_reference				测试类型是否为 lvalue 引用。
is_member_function_pointer				测试类型是否为指向成员函数的指针。
is_member_object_pointer				测试类型是否为指向成员对象的指针。
is_member_pointer				测试类型是否为指向成员的指针。
is_object				测试类型是否为对象类型。
is_pod				测试类型是否为 POD。
is_pointer				测试类型是否为指针。
is_polymorphic				测试类型是否包含虚拟函数。
is_reference				测试类型是否为引用。
is_rvalue_reference				测试类型是否为 rvalue 引用。
is_same				确定两个类型是否相同。
is_scalar				测试类型是否为标量类型。
is_signed				测试类型是否为有符号的整数。
is_standard_layout				测试类型是否为标准布局。
is_union				测试类型是否为联合。
is_unsigned				测试类型是否为无符号的整数。
is_void				测试类型是否为 void。
is_volatile				测试类型是否为可变型。
make_signed				设置类型或大小大于或等于类型的有符号的最小类型。
make_unsigned				设置类型或大小大于或等于类型的无符号的最小类型。
rank				获取数组维度数。
remove_all_extents				从数组类型设置非数组类型。
remove_const				从类型设置非常量类型。
remove_cv				从类型设置非常量/可变类型。
remove_extent				从数组类型设置元素类型。
remove_pointer				从指向类型的指针设置类型。
remove_reference				从类型设置非引用类型。
remove_volatile				从类型设置非可变类型。
integral_constant				从类型和值设置整数常量。




逻辑地址、线性地址和物理地址是内存管理中涉及的三种不同类型的地址。它们之间的主要区别在于处理方式以及它们所处的抽象层次。

1. 逻辑地址
定义：逻辑地址是程序编译或链接阶段生成的地址，由CPU产生，是用户态程序能直接访问的地址。
生成方式：在程序运行时，逻辑地址由CPU通过指令产生，是进程所感知的地址空间。
作用：逻辑地址是程序代码、变量、堆栈等内存分配的基本单位，与进程的虚拟地址空间直接对应。
映射过程：通过段式地址转换，逻辑地址被映射为线性地址。
逻辑地址主要用于用户的视角，即程序员或编译器看待内存的方式。
段基址+逻辑地址=线性地址。

2. 线性地址
定义：线性地址是逻辑地址经过段式管理后得到的中间地址。
生成方式：逻辑地址通过段基址（如CS、DS寄存器）和偏移量组合成线性地址。
作用：线性地址是为分页机制服务的中间地址。在分页机制下，它被分割为多个页，方便映射到物理内存。
映射过程：线性地址通过分页机制映射到实际的物理地址。
如果CPU没有分页机制，那么线性地址=物理地址。

3. 物理地址
定义：物理地址是内存条上的实际地址，是CPU访问内存硬件时的最终地址。
生成方式：线性地址通过页表映射（如通过页目录和页表），最终得到物理地址。
作用：物理地址直接映射到内存单元，是操作系统实际操作的地址空间。
特点：物理地址空间是全局共享的，不同进程最终访问的物理内存是受操作系统控制的。物理地址通常是唯一的，并且与内存的实际物理布局相对应。



16. 对于一个频繁使用的短小函数，应该使用什么来实现？有什么优缺点？

应该使用inline内联函数，即编译器将inline内联函数内的代码替换到函数被调用的地方。

优点：

    在内联函数被调用的地方进行代码展开，省去函数调用的时间，从而提高程序运行效率；
    相比于宏函数，内联函数在代码展开时，编译器会进行语法安全检查或数据类型转换，使用更加安全；

缺点：

    代码膨胀，产生更多的开销；
    如果内联函数内代码块的执行时间比调用时间长得多，那么效率的提升并没有那么大； -如果修改内联函数，那么所有调用该函数的代码文件都需要重新编译；
    内联声明只是建议，是否内联由编译器决定，所以实际并不可控。


18. shared_ptr是如何实现的？

    构造函数中计数初始化为1；
    拷贝构造函数中计数值加1；
    赋值运算符中，左边的对象引用计数减1，右边的对象引用计数加1；
    析构函数中引用计数减1；
    在赋值运算符和析构函数中，如果减1后为0，则调用delete释放对象。
19. 右值引用有什么作用？

右值引用的主要目的是为了实现转移语义和完美转发，消除两个对象交互时不必要的对象拷贝，也能够更加简洁明确地定义泛型函数

20.悬挂指针与野指针有什么区别？

    悬挂指针：当指针所指向的对象被释放，但是该指针没有任何改变，以至于其仍然指向已经被回收的内存地址，这种情况下该指针被称为悬挂指针；
    野指针：未初始化的指针被称为野指针。


22.请解析((void ()( ) )p)( )的含义

    void (*p)( ) ：是一个返回值为void，参数为空的函数指针p。
    (void (*)( ))p：把p转变成一个返回值为void，参数为空的函数指针。
    (void (**)( ))p：在上句的基础上加表示整个是一个返回值为void，无参数，并且起始地址为p的函数的名字。
    ((void ()( ))p)( )：这就是上句的函数名所对应的函数的调用。


24. typedef 和define 有什么区别

    用法不同：typedef 用来定义一种数据类型的别名，增强程序的可读性。define 主要用来定义 常量，以及书写复杂使用频繁的宏。
    执行时间不同：typedef 是编译过程的一部分，有类型检查的功能。define 是宏定义，是预编译的部分，其发生- 在编译之前，只是简单的进行字符串的替换，不进行类型的检查。
    作用域不同：typedef 有作用域限定。define 不受作用域约束，只要是在define 声明后的引用 都是正确的。
    对指针的操作不同：typedef 和define 定义的指针时有很大的区别。
    「注意」：typedef 定义是语句，因为句尾要加上分号。而define 不是语句，千万不能在句尾加分号

31. 说一说extern“C”

extern “C”的主要作用就是为了能够正确实现C++代码调用其他C语言代码。加上extern “C”后，会指示编译器这部分代码按C语言（而不是C++）的方式进行编译。由于C++支持函数重载，因此编译器编译函数的过程中会将函数的参数类型也加到编译后的代码中，而不仅仅是函数名；而C语言并不支持函数重载，因此编译C语言代码的函数时不会带上函数的参数类型，一般只包括函数名。

这个功能十分有用处，因为在C++出现以前，很多代码都是C语言写的，而且很底层的库也是C语言写的，为了更好的支持原来的C代码和已经写好的C语言库，需要在C++中尽可能的支持C，而extern “C”就是其中的一个策略。

    C++代码调用C语言代码
    在C++的头文件中使用
    在多个人协同开发时，可能有的人比较擅长C语言，而有的人擅长C++，这样的情况下也会有用到

35. C++异常机制

在C++中，使用异常机制可以提高程序的健壮性和可维护性。异常是在程序运行时发生的一个事件，它会打断正在执行的程序的正常流程。C++异常处理机制可以使程序在出现异常时，进行异常处理，而不是退出程序。


10. 构造函数和析构函数能抛出异常吗？

    从语法的角度来说，构造函数可以抛出异常，但从逻辑和风险控制的角度来说，尽量不要抛出异常，否则可能导致内存泄漏。
    析构函数不可以抛出异常，如果析构函数抛出异常，则异常点之后的程序，比如释放内存等操作，就不会被执行，从而造成内存泄露的问题；而且当异常发生时，C++通常会调用对象的析构函数来释放资源，如果此时析构函数也抛出异常，即前一个异常未处理又出现了新的异常，从而造成程序崩溃的问题。


12. 多继承存在什么问题？如何消除多继承中的二义性？

增加程序的复杂度，使得程序的编写和维护比较困难，容易出错； 在继承时，基类之间或基类与派生类之间发生成员同名时，将出现对成员访问的不确定性，即同名二义性；

消除同名二义性的方法：

    利用作用域运算符::，用于限定派生类使用的是哪个基类的成员；
    在派生类中定义同名成员，覆盖基类中的相关成员；

当派生类从多个基类派生，而这些基类又从同一个基类派生，则在访问此共同基类的成员时，将产生另一种不确定性，即路径二义性；

消除路径二义性的方法：

    消除同名二义性的两种方法都可以；
    使用虚继承，使得不同路径继承来的同名成员在内存中只有一份拷贝。


21. RTTI是什么？其原理是什么？

RTTI即运行时类型识别，其功能由两个运算符实现：

    typeid运算符，用于返回表达式的类型，可以通过基类的指针获取派生类的数据类型；
    dynamic_cast运算符，具有类型检查的功能，用于将基类的指针或引用安全地转换成派生类的指针或引用。



19. STL内存优化？

STL内存管理使用二级内存配置器。

(1) 第一级配置器：

第一级配置器以malloc()，free()，realloc()等C函数执行实际的内存配置、释放、重新配置等操作，并且能在内存需求不被满足的时候，调用一个指定的函数。一级空间配置器分配的是大于128字节的空间，如果分配不成功，调用句柄释放一部分内存，如果还不能分配成功，抛出异常。

第一级配置器只是对malloc函数和free函数的简单封装，在allocate内调用malloc，在deallocate内调用free。同时第一级配置器的oom_malloc函数，用来处理malloc失败的情况。

(2) 第二级配置器：

第一级配置器直接调用malloc和free带来了几个问题：

    内存分配/释放的效率低
    当配置大量的小内存块时，会导致内存碎片比较严重
    配置内存时，需要额外的部分空间存储内存块信息，所以配置大量的小内存块时，还会导致额外内存负担 如果分配的区块小于128bytes，则以内存池管理，第二级配置器维护了一个自由链表数组，每次需要分配内存时，直接从相应的链表上取出一个内存节点就完成工作，效率很高

自由链表数组：自由链表数组其实就是个指针数组，数组中的每个指针元素指向一个链表的起始节点。数组大小为16，即维护了16个链表，链表的每个节点就是实际的内存块，相同链表上的内存块大小都相同，不同链表的内存块大小不同，从8一直到128。如下所示，obj为链表上的节点，free_list就是链表数组。

内存分配：allocate函数内先判断要分配的内存大小，若大于128字节，直接调用第一级配置器，否则根据要分配的内存大小从16个链表中选出一个链表，取出该链表的第一个节点。若相应的链表为空，则调用refill函数填充该链表。默认是取出20个数据块。

填充链表 refill：若allocate函数内要取出节点的链表为空，则会调用refill函数填充该链表。refill函数内会先调用chunk_alloc函数从内存池分配一大块内存，该内存大小默认为20个链表节点大小，当内存池的内存也不足时，返回的内存块节点数目会不足20个。接着refill的工作就是将这一大块内存分成20份相同大小的内存块，并将各内存块连接起来形成一个链表。

内存池：chunk_alloc函数内管理了一块内存池，当refill函数要填充链表时，就会调用chunk_alloc函数，从内存池取出相应的内存。

    在chunk_alloc函数内首先判断内存池大小是否足够填充一个有20个节点的链表，若内存池足够大，则直接返回20个内存节点大小的内存块给refill；
    若内存池大小无法满足20个内存节点的大小，但至少满足1个内存节点，则直接返回相应的内存节点大小的内存块给refill；
    若内存池连1个内存节点大小的内存块都无法提供，则chunk_alloc函数会将内存池中那一点点的内存大小分配给其他合适的链表，然后去调用malloc函数分配的内存大小为所需的两倍。若malloc成功，则返回相应的内存大小给refill；若malloc失败，会先搜寻其他链表的可用的内存块，添加到内存池，然后递归调用chunk_alloc函数来分配内存，若其他链表也无内存块可用，则只能调用第一级空间配置器。





7. 为什么友元函数必须在类内部声明？
友元函数需要访问类的私有和保护成员，因此必须在类内部声明。这样可以确保友元函数能够正确地访问类的成员。

8. 友元函数和友元类的基本情况？
友元函数是一个非成员函数，可以访问类的私有和保护成员。友元类则是另一个类，可以访问对方的私有和保护成员。


4）有哪几种情况初始化方式只能用initialization list而不能用assignment？

当类中含有const、reference成员变量；基类的构造函数。

5）举例说明函数返回值采用引用传递的作用。

函数返回值采用引用传递的场合并不多，一般只出现在类的赋值函数中，目的是为了实现链式表达。例如：



1）C++中有malloc/free，为什么还需要new/delete?

new/delete会调用构造/析构函数，适合于类类型对象的创建与销毁。

2）C++中explicit关键字的作用?

关闭函数的类型自动转换（防止隐式转换）



9）new operator 和operator new 的区别？

new operator实际上先后调用了operator new和constrctor两个函数。





































































一个高质量的 C++ 面试，通常不会仅仅停留在语法或简单的算法题上，而是要求候选人展示他们在实际开发中对语言特性和系统设计的深入理解。

会考察你对内存管理、并发编程、虚函数机制、模板元编程等复杂特性如何应用于真实项目，并常伴随一些深入的追问，以评估候选人解决问题的能力、代码优化的经验以及系统架构的思维。

1、内存管理与指针

问题：解释 C++ 中的智能指针（如 std::unique_ptr 和 std::shared_ptr）的原理，及其使用场景。如何避免循环引用？

考察点：

    对动态内存分配的理解。
    RAII (Resource Acquisition Is Initialization) 的理解。
    智能指针的内部机制，如引用计数和弱指针。
    如何避免循环引用，通常会涉及到 std::weak_ptr 的使用。

深入问题：你是否能设计一个自定义智能指针？它如何与标准库智能指针的效率比较？

2、多线程与并发编程

问题：在多线程环境下如何使用 std::mutex 和 std::lock_guard 来保护共享数据？解释 C++11 标准中的内存模型以及内存屏障的概念。

考察点：

    对线程安全的理解。
    如何防止死锁（比如使用 std::lock 和 std::scoped_lock）。
    对 C++11 新标准多线程库的熟练掌握。
    原子操作和 std::atomic 的使用，特别是在高性能并发环境下的适用性。

深入问题：你如何在一个高并发环境中设计一个无锁队列？该设计中存在哪些挑战？

3、虚函数与多态性

问题：解释 C++ 中虚函数的工作机制，如何在运行时支持多态？虚表是如何实现的，虚表指针会占用多少内存？

考察点：

    候选人对虚函数表（vtable）和虚表指针的理解。
    在类继承体系中，多态性的具体实现细节，特别是虚表的存储和访问机制。
    解决抽象类和接口设计中的典型问题，如内存开销和性能的折中。

深入问题：在设计大型系统时，你如何避免由于过度使用虚函数导致的性能问题？如何在需要高性能的地方绕开虚函数？

4、C++ 标准库与模板元编程

问题：解释模板的偏特化和全特化。举例说明在实际开发中如何使用这些特性提高代码的灵活性和复用性。

考察点：

    模板元编程的深度理解，尤其是 C++ 中的模板实例化规则。
    偏特化与全特化的区别，以及在实际应用中的场景。
    对 std::enable_if、SFINAE (Substitution Failure Is Not An Error) 等高级模板技术的掌握。

深入问题：请实现一个基于模板元编程的类型推导系统，能够在编译期推导出一个函数返回的类型，并结合 SFINAE 做出函数的选择。

5、性能优化与代码设计

问题：给定一段代码，分析其性能瓶颈。如何使用 C++ 的特性进行优化？（可能涉及大量数据处理、内存分配或者频繁的函数调用）

考察点：

    了解内存分配的细节和缓存的使用。
    对代码执行的性能影响因素如分支预测、缓存局部性、内联函数等有清晰认识。
    熟悉剖析工具（profiling tools）如 gprof 或 valgrind，知道如何根据剖析结果进行优化。

深入问题：如果让你优化一个性能关键的系统模块，如何通过细粒度的分析来定位问题？会考虑使用哪些 C++ 特性（如 constexpr、移动语义）来优化？

6、系统设计

问题：如何设计一个高效的缓存系统？要求支持多线程读写、淘汰策略（LRU）以及内存利用率的控制。你会如何在 C++ 中实现它？

考察点：

    系统设计的综合能力。
    如何使用 STL 容器（如 std::unordered_map）与自定义数据结构相结合。
    使用 RAII 模式和智能指针确保系统的稳定性和资源管理。
    对锁和无锁机制的权衡，如何确保线程安全的同时最大化性能。

深入问题：你会如何选择合适的淘汰策略？如何通过提高缓存命中率来优化系统的总体性能？

7、编译器原理与底层实现

问题：解释 C++ 编译过程中的各个阶段：预处理、编译、汇编、链接。编译器是如何将模板代码实例化为具体实现的？

考察点：

    对编译过程的深刻理解，能从底层解释 C++ 代码是如何转化为机器码的。
    熟悉 C++ 模板实例化的规则，了解常见的编译错误以及解决方法。
    对链接器如何处理符号解析、动态库和静态库的知识。

深入问题：编译优化中的 inline、constexpr 和模板展开有何不同？这些优化在不同场景下如何影响性能？





4 类模板的实例化

。。。


注意：在多文件项目中，类模板的代码，函数模板的代码，一般要写在头文件中，而不是源文件中。因为，主函数文件一般只包含头文件，在编译器自动生成时，必须看到模板的全部代码。


5 模板内符号身份的确定

在类模板的代码中，如果一个外部类型中，嵌套定义了一个内部类型，两者都可能使用了模板参数类型代号来表示时，那么如果像之前讲过的那样使用命名空间操作符时 外部类型名::内部类型名，会产生歧义——编译器不确定第二个名字是 类型名 还是 成员数据名。解决方法是：

使用 typename 关键字，写在整个名称的最前面，可以显式地说明 这个标识符 是某个类型名，而不是 成员数据名/变量名。这是 typename 除了用于模板开头之外的的第二个用法。

typename 模板参数表示的外部类型::模板参数表示的内部类型  //一个类型名，不可单独使用

。。。


6 非类型的模板参数

非类型的模板参数，只能是 整数型int，unsigned int 或者 可以安全转换成整数型的类型，即 char，enum，指针。

。。。


7 模板参数默认值

和 函数参数的默认值 类似，类模板的模板参数 可以有默认值，并且有默认值的模板参数也必须靠后、从最后一个开始。

设置了模板参数默认值，使用时可以省略指定该参数，不过尖括号<> 不可省略。

注意：就像 慎用函数参数的默认值 一样，建议 慎用模板参数默认值，虽然看起来更简单了，但会使得代码更加难懂。

template<typename 模板参数代号1 = 参数1的默认类型, typename 模板参数代号2 = 参数2的默认类型>
class 类模板名
{
};
